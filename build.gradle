allprojects {
    group 'com.agorapulse.testing'
    repositories {
        jcenter()
        mavenCentral()
        maven { url  "https://dl.bintray.com/agorapulse/libs" }
        maven { url "https://repo.spring.io/release"  }
    }
}

subprojects { Project subproject ->
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'

    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8

    test {
        testLogging {
            events "PASSED", "STARTED", "FAILED", "SKIPPED", "STANDARD_ERROR", "STANDARD_OUT"
            showCauses = true
            showExceptions = true
            showStackTraces = true
            showStandardStreams = false
            exceptionFormat "full"
        }

        systemProperty 'TEST_RESOURCES_FOLDER', new File(subproject.projectDir, 'src/test/resources').canonicalPath
        systemProperty 'user.timezone', 'UTC'
        systemProperty 'user.language', 'en'

        // see https://discuss.gradle.org/t/show-stderr-for-failed-tests/8463/7
        List<String> out = []
        List<String> err = []

        beforeTest { TestDescriptor td ->
            out.clear()
            err.clear()
        }

        onOutput { TestDescriptor td, TestOutputEvent toe ->
            String[] lines = toe.getMessage().split('(?m)$')
            if (toe.destination == TestOutputEvent.Destination.StdErr) {
                err.addAll(lines)
            } else {
                out.addAll(lines)
            }
        }

        afterTest { TestDescriptor td, TestResult tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE && (out || err)) {
                println("${td.className}.${td.name} failed!")
                println()
                println("\n=== OUT ===\n")
                println()
                out.each { print(it) }
                println()
                println("\n=== ERR ===\n")
                println()
                err.each { print(it) }
            }
        }
    }

    task cleanOut(type: Delete) {
        delete file('out')
    }

    clean.dependsOn cleanOut

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = '6.19'
    }

    codenarc {
        configFile = rootProject.file('config/codenarc.xml')
        toolVersion = '1.3'
    }
}


// docs
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.palantir.jacoco-full-report'
apply plugin: 'com.github.kt3k.coveralls'

dependencies {
    // https://mvnrepository.com/artifact/io.spring.asciidoctor/spring-asciidoctor-extensions
    asciidoctor group: 'io.spring.asciidoctor', name: 'spring-asciidoctor-extensions', version: '0.1.3.RELEASE'
}

// asciidoctor publishing
asciidoctor {

    sourceDir = file('docs')

    resources {
        from(sourceDir) {
            include 'css/**', 'images/**'
        }
    }

    attributes 'docinfo1': ['version': project.version],
        'imagesdir': 'images',
        'source-highlighter': 'highlight.js',
        'stylesdir': 'css',
        icons: 'font',
        'toc': 'left',
        'toclevels': '3',
        version: project.version,
        'projectUrl': 'https://github.com/agorapulse/testing-libraries'
}

gitPublish {
    repoUri = 'git@github.com:agorapulse/testing-libraries.git'
    branch = 'gh-pages'

    contents {
        from file(asciidoctor.outputDir.path + '/html5')
        subprojects.each { Project subproject ->
            from(subproject.javadoc.outputs.files) {
                into "docs/javadoc/$subproject.name"
            }
        }
    }
}

gitPublishCopy.dependsOn subprojects*.javadoc
gitPublishCopy.dependsOn asciidoctor

tasks.jacocoFullReport.dependsOn subprojects.collect { it.tasks.check }

gradle.taskGraph.whenReady {
    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoFullReport/jacocoFullReport.xml"
    }
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoFullReport
    onlyIf { System.env.CI }
}
